<pre class=metadata>
Title: Element Timing API
Status: CG-DRAFT
Shortname: element-timing
Group: WICG
Level: 1
Editor: Ian Clelland, Google https://google.com, iclelland@chromium.org, w3cid 76841
        Tim Dresser, Google https://google.com, tdresser@chromium.org
Former Editor: Nicolás Peña Moreno, Google https://google.com, npm@chromium.org
URL: https://wicg.github.io/element-timing
Repository: https://github.com/WICG/element-timing
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/element-timing
Abstract: This document defines an API that enables monitoring when large or developer-specified image elements and text nodes are displayed on screen.
Default Highlight: js
</pre>

<pre class=anchors>
urlPrefix: https://w3c.github.io/performance-timeline/; spec: PERFORMANCE-TIMELINE-2;
    type: interface; url: #the-performanceentry-interface; text: PerformanceEntry;
    type: attribute; for: PerformanceEntry;
        text: name; url: #dom-performanceentry-name;
        text: entryType; url: #dom-performanceentry-entrytype;
        text: startTime; url: #dom-performanceentry-starttime;
        text: duration; url: #dom-performanceentry-duration;
    type: dfn; url: #dfn-queue-a-performanceentry; text: queue the PerformanceEntry;
    type: interface; url: #the-performanceobserver-interface; text: PerformanceObserver;
    type: attribute; for: PerformanceObserver;
        text: supportedEntryTypes; url: #supportedentrytypes-attribute;
urlPrefix: https://w3c.github.io/IntersectionObserver; spec: INTERSECTION-OBSERVER;
    type: dfn; url: #calculate-intersection-rect-algo; text: intersection rect algorithm;
urlPrefix: https://html.spec.whatwg.org/multipage; spec: HTML;
    type: dfn; url: //webappapis.html#event-loop-processing-model; text: event loop processing model;
urlPrefix: https://drafts.csswg.org/css-backgrounds-3; spec: CSS-BACKGROUNDS-3;
    type: dfn; url: #propdef-background-image; text: background-image;
urlPrefix: https://wicg.github.io/largest-contentful-paint/; spec: LARGEST-CONTENTFUL-PAINT;
    type: dfn; url:#potentially-add-a-largestcontentfulpaint-entry; text: potentially add a LargestContentfulPaint entry;
urlPrefix: https://w3c.github.io/paint-timing/; spec: PAINT-TIMING;
    type: dfn; url:#set-of-owned-text-nodes; text: set of owned text nodes;
    type: dfn; url:#process-image-that-finished-loading; text: process image that finished loading;
    type: dfn; url:#timing-eligible; text: timing-eligible
    type: dfn; url:#the-paint-timing-steps; text: the paint timing steps
    type: dfn; url:#exposed-for-paint-timing; text: exposed for paint timing
    type: dfn; url:#pending-image-record; text: pending image record
    type: dfn; for:pending image record; url:#pending-image-record-element; text: element
    type: dfn; for:pending image record; url:#pending-image-record-loadtime; text: loadTime
    type: dfn; for:pending image record; url:#pending-image-record-request; text: request
    type: dfn; url:#paint-timing-info; text: paint timing info
    type: dfn; for: paint timing info; text: default paint timestamp;
    type: dfn; for:PaintTimingMixin; url:#painttimingmixin-paint-timing-info; text: paint timing info
    type: interface; text:PaintTimingMixin; url:#painttimingmixin
</pre>

<pre class=link-defaults>
spec:dom; type:dfn; text:descendant
</pre>

Introduction {#sec-intro}
=====================

<em>This section is non-normative.</em>

Knowing when critical elements are displayed on screen is key to understanding page load performance.
While fast rendering of the essential components is not sufficient for a satisfactory loading experience, it is necessary.
Therefore, monitoring these rendering timestamps is important to improve and prevent regressions in page loads.

This specification gives developers and analytics providers an API to measure rendering timestamps of critical elements.
There is currently no good way to measure these timestamps for real users.
Existing approaches would require either registering observers too early or significant DOM manipulation.
These approaches are discussed on the [[#sec-security]] section.

Web developers are the experts in critical user interactions for their sites, so they should be allowed to tell the user agent which are the elements they care about.
Thus, this API exposes rendering timing information about web-developer-annotated elements.

Elements exposed {#sec-elements-exposed}
------------------------

The Element Timing API supports timing information about <a>timing-eligible</a>
elements, as defined by [[PAINT-TIMING]].

Elements that have a "<code>elementtiming</code>" content attribute are reported in the <a>report image element timing</a> and the <a>report text element timing</a> algorithms.

Usage example {#sec-example}
------------------------

The following example shows an image that is registered for observation via its <code>elementtiming</code> attribute, and an observer gathering the timing information.

<xmp class="example highlight" highlight=html>
    <img... elementtiming='foobar'/>
    <p elementtiming='important-paragraph'>This is text I care about.</p>
    ...
    <script>
    const observer = new PerformanceObserver((list) => {
      let perfEntries = list.getEntries();
      // Process the entries by iterating over them.
    });
    observer.observe({type: 'element', buffered: true});
    </script>
</xmp>

The following are sample elements whose rendering timestamps could be measured by using this API and which should be compared to page navigation:
* The images in the image carousel of a shopping site.
* The main photo in a story of a news site.
* The title of a blog post.
* The first paragraph in an entry of an encyclopedia site.

The API could have use cases outside of page load by comparing the rendering timestamps with input timestamps.
For example, developers could monitor the time it takes for a widget to show up after a click that triggers it.

Element Timing {#sec-element-timing}
=======================================

Element Timing involves the following new interfaces:

{{PerformanceElementTiming}} interface {#sec-performance-element-timing}
------------------------------------------------------------------------

<pre class="idl">
[Exposed=Window]
interface PerformanceElementTiming : PerformanceEntry {
    readonly attribute DOMHighResTimeStamp renderTime;
    readonly attribute DOMHighResTimeStamp loadTime;
    readonly attribute DOMRectReadOnly intersectionRect;
    readonly attribute DOMString identifier;
    readonly attribute unsigned long naturalWidth;
    readonly attribute unsigned long naturalHeight;
    readonly attribute DOMString id;
    readonly attribute Element? element;
    readonly attribute DOMString url;
    [Default] object toJSON();
};

PerformanceElementTiming includes PaintTimingMixin;
</pre>

A {{PerformanceElementTiming}} object reports timing information about one associated element.

Each {{PerformanceElementTiming}} object has these associated concepts, all of which are initially set to <code>null</code>:
* A <dfn>request</dfn> containing the <a>image request</a> (if the entry is for image content).
* An <dfn>element</dfn> containing the associated {{Element}}.

The associated concepts and some attributes for {{PerformanceElementTiming}} are specified in the processing model in [[#sec-report-image-element]] and [[#sec-report-text]].

The {{PerformanceEntry/entryType}} attribute's getter must return the {{DOMString}} <code>"element"</code>.

The {{PerformanceEntry/name}} attribute's getter must return the value it was initialized to.

The {{PerformanceEntry/startTime}} attribute's getter must return the value of <a>this</a>'s {{renderTime}} if it is not 0, and the value of <a>this</a>'s {{loadTime}} otherwise.

The {{PerformanceEntry/duration}} attribute's getter must return 0.

The {{PerformanceElementTiming/renderTime}} attribute getter step is to return the [=default paint timestamp=] given [=this=]'s [=PaintTimingMixin/paint timing info=].

The {{PerformanceElementTiming/loadTime}} attribute's getter must return the the value it was initialized to.

The {{PerformanceElementTiming/intersectionRect}} attribute must return the value it was initialized to.

The {{PerformanceElementTiming/identifier}} attribute's getter must return the value it was initialized to.

The {{PerformanceElementTiming/naturalWidth}} attribute must return the value it was initialized to.

The {{PerformanceElementTiming/naturalHeight}} attribute must return the value it was initialized to.

The {{PerformanceElementTiming/id}} attribute's getter must return the value it was initialized to.

The {{PerformanceElementTiming/element}} attribute's getter must perform the following steps:
<div algorithm="PerformanceElementTiming element">
    1. If <a>this</a>'s <a>element</a> is not [=exposed for paint timing=] given null, return null.
    1. Return <a>this</a>'s <a>element</a>.
</div>

Note: This means that an element that is no longer <a>descendant</a> of the {{Document}} will no longer be returned by {{PerformanceElementTiming/element}}'s attribute getter.

The {{PerformanceElementTiming/url}} attribute's getter must perform the following steps:
<div algorithm="PerformanceElementTiming url">
    1. If <a>this</a>'s <a>request</a> is null, return the empty string.
    1. Let |urlString| be <a>this</a>'s <a>request</a>'s <a for="image request">current URL</a>.
    1. Let |url| be the result of <a lt="URL parser">parsing</a> |urlString|.
    1. If |url|'s <a spec=url>scheme</a> is "`data`", trim |urlString| to its first 100 characters.
    1. Return |urlString|.
</div>

Note: The URL is trimmed for data URLs to avoid excessive memory in the entry.

Processing model {#sec-processing-model}
========================================

Note: A user agent implementing the Element Timing API would need to include <code>"element"</code> in {{PerformanceObserver/supportedEntryTypes}} for {{Window}} contexts.
This allows developers to detect support for element timing.

Modifications to the DOM specification {#sec-modifications-DOM}
--------------------------------------------------------

<em>This section will be removed once the [[DOM]] specification has been modified.</em>

We extend the {{Element}} interface as follows:

<pre class="idl">
partial interface Element {
    [CEReactions] attribute DOMString elementTiming;
};
</pre>

The {{Element/elementTiming}} attribute must <a>reflect</a> the element's "<code>elementtiming</code>" content attribute.

Report Element Timing {#sec-report-element-timing}
--------------------------------------------------

<div export algorithm="report element timing">
    When asked to <dfn>report element timing</dfn> given a {{Document}} |doc|, a [/=paint timing info=] |paintTimingInfo|, an [=ordered set=] of [=pending image records=] |paintedImages|, and an [=ordered set=] of [=/elements=] |paintedTextNodes|, perform the following steps:

    1. For each |record| in |paintedImages|:
        1. Run the <a>report image element timing</a> algorithm passing in |record|, |paintTimingInfo|, and |doc|.
    1. For each {{Element}} |element| in |paintedTextNodes|:
        1. Run the <a>report text element timing</a> given |element|, |paintTimingInfo|, and |doc|.
</div>

Report Image Element Timing {#sec-report-image-element}
--------------------------------------------------------

<div algorithm="report image element timing">
    When asked to <dfn>report image element timing</dfn> given a [=pending image record=] |record|, a [=/paint timing info=] |paintTimingInfo| and a {{Document}} |document|, perform the following steps:

    1. If |record|'s [=pending image record/element=]'s "<code>elementtiming</code>" content attribute is absent, then abort these steps.
    1. Let |intersectionRect| be the value returned by the <a>intersection rect algorithm</a> using |record|'s [=pending image record/element=] as the target and viewport as the root.
    1. Create and initialize a {{PerformanceElementTiming}} object |entry| with |document|'s [=relevant realm=], whose [=PaintTimingMixin/paint timing info=] is |paintTimingInfo|.
        1. Initialize |entry|'s <a>request</a> to |record|'s [=pending image record/request=].
        1. Initialize |entry|'s <a>element</a> to |record|'s [=pending image record/element=].
        1. Initialize |entry|'s {{PerformanceEntry/name}} to the {{DOMString}} "image-paint".
        1. Initialize |entry|'s {{loadTime}} to |record|'s [=pending image record/loadTime=].
        1. Initialize |entry|'s {{intersectionRect}} to |intersectionRect|.
        1. Initialize |entry|'s {{identifier}} to |record|'s [=pending image record/element=]'s "<code>elementtiming</code>" content attribute.
        1. Initialize |entry|'s {{PerformanceElementTiming/naturalWidth}} and {{PerformanceElementTiming/naturalHeight}} by running the same steps for an <{img}>'s {{HTMLImageElement/naturalWidth}} and {{HTMLImageElement/naturalHeight}} attribute getters, but using |record|'s [=pending image record/request=] as the image.
        1. Initialize |entry|'s {{id}} to |record|'s [=pending image record/element=]'s "<code>id</code>" content attribute.
    1. <a>Queue the PerformanceEntry</a> |entry|.
</div>

Report Text Element Timing {#sec-report-text}
--------------------------------------------------------

<div algorithm="report text element timing">
    When asked to <dfn>report text element timing</dfn> given an {{Element}} |element|, a [=/paint timing info=] |paintTimingInfo| and a {{Document}} |document|, perform the following steps:

    1. If |element|'s "<code>elementtiming</code>" content attribute is absent, then abort these steps.
    1. Let |intersectionRect| be an empty rectangle.
    1. For each {{Text}} <a>node</a> |text| in |element|'s <a>set of owned text nodes</a>:
        1. Augment |intersectionRect| to be smallest rectangle containing the border box of |text| and |intersectionRect|.
    1. Intersect |intersectionRect| with the visual viewport.
    1. Create and initialize a {{PerformanceElementTiming}} object |entry| with |document|'s [=relevant realm=], whose [=PaintTimingMixin/paint timing info=] is |paintTimingInfo|.
        1. Initialize |entry|'s <a>element</a> to |element|.
        1. Initialize |entry|'s {{PerformanceEntry/name}} to the {{DOMString}} "text-paint".
        1. Initialize |entry|'s {{loadTime}} to 0.
        1. Initialize |entry|'s {{intersectionRect}} to |intersectionRect|.
        1. Initialize |entry|'s {{identifier}} to |element|'s "<code>elementtiming</code>" content attribute.
        1. Initialize |entry|'s {{PerformanceElementTiming/naturalWidth}} and {{PerformanceElementTiming/naturalHeight}} to 0.
        1. Initialize |entry|'s {{id}} to |element|'s "<code>id</code>" content attribute.
    1. <a>Queue the PerformanceEntry</a> |entry|.
</div>

Security & privacy considerations {#sec-security}
===============================================

This API exposes some information about cross-origin images.
In particular, images have their resource load time exposed, which could be a source of privacy concerns.

However, this is considered to not add new attacks to the web platform because the ResourceTiming API exposes a similar timestamp already.
In addition, the onload handler exposes load timing when it is available, and the resource load time is a close proxy to this.
The <a>current high resolution time</a> computed at the beginning of the onload handler would provide the image load time.
We choose to expose the {{loadTime}} because it is very easy to obtain even without an onload handler.
In addition, we believe any fix to remove the leak provided by image onload handlers or ResourceTiming could also fix the leak provided by this API.

The {{renderTime}} (display timestamp) is indeed newly exposed information. Implementations are advised to coarsen that timestamp further,
o a 4 milliseconds resolution at least, to avoid exposing differences in decoding time between cross-origin images. Note that other checks,
such as `Timing-Allow-Origin`, does not work here due to same-origin and cross-origin images being rendered at the same time.
Exposing a coarse {{renderTime}} is anyway not a substantial attack vector, given that image [=natural size=] and loading time are exposed in other ways.

<xmp class="example highlight" highlight=html>
    // In the attacker frame.
    <iframe src=attack.html></iframe>
    <script>
        window.onmessage = e => {
            let timestamp = e.data;
            // Acquired the display timestamp for 'victim.jpg'!
        }
    </script>

    // In the attack.html iframe.
    <img src='victim.jpg'/>
    <script>
        // Wait until onload or some time when the PaintTiming entries will be visible.
        onload() => {
            let entry = performance.getEntriesByType('paint')[0];
            top.postMessage(entry.startTime, '*');
        }
    </script>
</xmp>

The other nontrivial parameter being exposed here is the {{intersectionRect}}.
This can already be polyfilled, for example using {{IntersectionObserver}}.
The polyfill process would be similar: add an {{IntersectionObserver}} on the onload handler of the target image or text content.
This solution is inefficient because it requires registering the observer once the content has loaded, but it should still provide the same level of accuracy.
If we were to compute the rect only until the image is fully displayed, we'd only be able to expose the entry after that time.

If we do not want to expose the rendering timetamp of an image, it's preferable to dispatch the entry to the {{PerformanceObserver}} right away.
Suppose we waited and exposed all the entries during the <a>report element timing</a> algorithm.
An attacker could infer nontrivial information about the rendering timestamp of an image.
It would do so by only observing the timing for that image.
Even though the timestamp is not exposed as a member of the {{PerformanceElementTiming}} entry received,
the fact that we wait until the next <a>update the rendering</a> step means that the attacker can distinguish between a very slow rendering time and a very fast rendering time by measuring the time at which it received the entry.
This would unintentionally leak some of the display timing of the image.
